<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 2500 1000" width="2500" height="1000" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M0 331L37.8 312.7C75.7 294.3 151.3 257.7 227.2 239.3C303 221 379 221 454.8 236C530.7 251 606.3 281 682 286C757.7 291 833.3 271 909 292.7C984.7 314.3 1060.3 377.7 1136.2 404.3C1212 431 1288 421 1363.8 379.3C1439.7 337.7 1515.3 264.3 1591 244.3C1666.7 224.3 1742.3 257.7 1818 279.3C1893.7 301 1969.3 311 2045.2 314.3C2121 317.7 2197 314.3 2272.8 286C2348.7 257.7 2424.3 204.3 2462.2 177.7L2500 151L2500 0L2462.2 0C2424.3 0 2348.7 0 2272.8 0C2197 0 2121 0 2045.2 0C1969.3 0 1893.7 0 1818 0C1742.3 0 1666.7 0 1591 0C1515.3 0 1439.7 0 1363.8 0C1288 0 1212 0 1136.2 0C1060.3 0 984.7 0 909 0C833.3 0 757.7 0 682 0C606.3 0 530.7 0 454.8 0C379 0 303 0 227.2 0C151.3 0 75.7 0 37.8 0L0 0Z" fill="#ea6e8e"/><path d="M0 511L37.8 546C75.7 581 151.3 651 227.2 672.7C303 694.3 379 667.7 454.8 642.7C530.7 617.7 606.3 594.3 682 574.3C757.7 554.3 833.3 537.7 909 551C984.7 564.3 1060.3 607.7 1136.2 639.3C1212 671 1288 691 1363.8 667.7C1439.7 644.3 1515.3 577.7 1591 556C1666.7 534.3 1742.3 557.7 1818 579.3C1893.7 601 1969.3 621 2045.2 612.7C2121 604.3 2197 567.7 2272.8 552.7C2348.7 537.7 2424.3 544.3 2462.2 547.7L2500 551L2500 149L2462.2 175.7C2424.3 202.3 2348.7 255.7 2272.8 284C2197 312.3 2121 315.7 2045.2 312.3C1969.3 309 1893.7 299 1818 277.3C1742.3 255.7 1666.7 222.3 1591 242.3C1515.3 262.3 1439.7 335.7 1363.8 377.3C1288 419 1212 429 1136.2 402.3C1060.3 375.7 984.7 312.3 909 290.7C833.3 269 757.7 289 682 284C606.3 279 530.7 249 454.8 234C379 219 303 219 227.2 237.3C151.3 255.7 75.7 292.3 37.8 310.7L0 329Z" fill="#e24d75"/><path d="M0 641L37.8 664.3C75.7 687.7 151.3 734.3 227.2 746C303 757.7 379 734.3 454.8 712.7C530.7 691 606.3 671 682 661C757.7 651 833.3 651 909 661C984.7 671 1060.3 691 1136.2 711C1212 731 1288 751 1363.8 727.7C1439.7 704.3 1515.3 637.7 1591 621C1666.7 604.3 1742.3 637.7 1818 661C1893.7 684.3 1969.3 697.7 2045.2 694.3C2121 691 2197 671 2272.8 662.7C2348.7 654.3 2424.3 657.7 2462.2 659.3L2500 661L2500 549L2462.2 545.7C2424.3 542.3 2348.7 535.7 2272.8 550.7C2197 565.7 2121 602.3 2045.2 610.7C1969.3 619 1893.7 599 1818 577.3C1742.3 555.7 1666.7 532.3 1591 554C1515.3 575.7 1439.7 642.3 1363.8 665.7C1288 689 1212 669 1136.2 637.3C1060.3 605.7 984.7 562.3 909 549C833.3 535.7 757.7 552.3 682 572.3C606.3 592.3 530.7 615.7 454.8 640.7C379 665.7 303 692.3 227.2 670.7C151.3 649 75.7 579 37.8 544L0 509Z" fill="#d81e5b"/><path d="M0 851L37.8 857.7C75.7 864.3 151.3 877.7 227.2 876C303 874.3 379 857.7 454.8 846C530.7 834.3 606.3 827.7 682 839.3C757.7 851 833.3 881 909 886C984.7 891 1060.3 871 1136.2 866C1212 861 1288 871 1363.8 871C1439.7 871 1515.3 861 1591 861C1666.7 861 1742.3 871 1818 872.7C1893.7 874.3 1969.3 867.7 2045.2 859.3C2121 851 2197 841 2272.8 829.3C2348.7 817.7 2424.3 804.3 2462.2 797.7L2500 791L2500 659L2462.2 657.3C2424.3 655.7 2348.7 652.3 2272.8 660.7C2197 669 2121 689 2045.2 692.3C1969.3 695.7 1893.7 682.3 1818 659C1742.3 635.7 1666.7 602.3 1591 619C1515.3 635.7 1439.7 702.3 1363.8 725.7C1288 749 1212 729 1136.2 709C1060.3 689 984.7 669 909 659C833.3 649 757.7 649 682 659C606.3 669 530.7 689 454.8 710.7C379 732.3 303 755.7 227.2 744C151.3 732.3 75.7 685.7 37.8 662.3L0 639Z" fill="#bb1a50"/><path d="M0 1001L37.8 1001C75.7 1001 151.3 1001 227.2 1001C303 1001 379 1001 454.8 1001C530.7 1001 606.3 1001 682 1001C757.7 1001 833.3 1001 909 1001C984.7 1001 1060.3 1001 1136.2 1001C1212 1001 1288 1001 1363.8 1001C1439.7 1001 1515.3 1001 1591 1001C1666.7 1001 1742.3 1001 1818 1001C1893.7 1001 1969.3 1001 2045.2 1001C2121 1001 2197 1001 2272.8 1001C2348.7 1001 2424.3 1001 2462.2 1001L2500 1001L2500 789L2462.2 795.7C2424.3 802.3 2348.7 815.7 2272.8 827.3C2197 839 2121 849 2045.2 857.3C1969.3 865.7 1893.7 872.3 1818 870.7C1742.3 869 1666.7 859 1591 859C1515.3 859 1439.7 869 1363.8 869C1288 869 1212 859 1136.2 864C1060.3 869 984.7 889 909 884C833.3 879 757.7 849 682 837.3C606.3 825.7 530.7 832.3 454.8 844C379 855.7 303 872.3 227.2 874C151.3 875.7 75.7 862.3 37.8 855.7L0 849Z" fill="#9e1744"/></svg>